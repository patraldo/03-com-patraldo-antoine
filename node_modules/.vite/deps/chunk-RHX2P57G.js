import {
  LitElement,
  __decorate,
  classMap,
  css,
  dispatchActivationClick,
  html,
  isActivationClick,
  isServer,
  nothing,
  property,
  query,
  queryAssignedElements,
  redispatchEvent,
  requestUpdateOnAriaChange,
  svg
} from "./chunk-A3TCMQTK.js";

// node_modules/@material/web/button/lib/shared-styles.css.js
var styles = css`:root{--md-filled-button-container-shape-start-start: 12px;--md-filled-button-container-shape: 8px}:host{display:inline-flex;outline:none;-webkit-tap-highlight-color:rgba(0,0,0,0);vertical-align:top;--md-ripple-hover-color: var(--_hover-state-layer-color);--md-ripple-pressed-color: var(--_pressed-state-layer-color);--md-ripple-hover-opacity: var(--_hover-state-layer-opacity);--md-ripple-pressed-opacity: var(--_pressed-state-layer-opacity);--md-focus-ring-shape-start-start: var(--_container-shape-start-start);--md-focus-ring-shape-start-end: var(--_container-shape-start-end);--md-focus-ring-shape-end-end: var(--_container-shape-end-end);--md-focus-ring-shape-end-start: var(--_container-shape-end-start)}:host([disabled]){cursor:default;pointer-events:none}.md3-button{display:inline-flex;align-items:center;justify-content:center;box-sizing:border-box;min-inline-size:64px;border:none;outline:none;user-select:none;-webkit-appearance:none;vertical-align:middle;background:rgba(0,0,0,0);text-decoration:none;inline-size:100%;position:relative;z-index:0;block-size:var(--_container-height);font:var(--_label-text-type);color:var(--_label-text-color);padding-inline-start:var(--_spacing-leading);padding-inline-end:var(--_spacing-trailing);gap:8px}.md3-button::before{background-color:var(--_container-color);border-radius:inherit;content:"";inset:0;position:absolute}.md3-button::-moz-focus-inner{padding:0;border:0}.md3-button:hover{color:var(--_hover-label-text-color);cursor:pointer}.md3-button:focus{color:var(--_focus-label-text-color)}.md3-button:active{color:var(--_pressed-label-text-color);outline:none}.md3-button:disabled .md3-button__label{color:var(--_disabled-label-text-color);opacity:var(--_disabled-label-text-opacity)}.md3-button:disabled::before{background-color:var(--_disabled-container-color);opacity:var(--_disabled-container-opacity)}@media(forced-colors: active){.md3-button::before{content:"";box-sizing:border-box;border:1px solid rgba(0,0,0,0);border-radius:inherit;inset:0;pointer-events:none;position:absolute}}.md3-button,.md3-button__ripple{border-start-start-radius:var(--_container-shape-start-start);border-start-end-radius:var(--_container-shape-start-end);border-end-start-radius:var(--_container-shape-end-start);border-end-end-radius:var(--_container-shape-end-end)}.md3-button::after,.md3-button::before,md-elevation,.md3-button__ripple{z-index:-1}.md3-button--icon-leading{padding-inline-start:var(--_with-icon-spacing-leading);padding-inline-end:var(--_with-icon-spacing-trailing)}.md3-button--icon-trailing{padding-inline-start:var(--_with-trailing-icon-spacing-leading);padding-inline-end:var(--_with-trailing-icon-spacing-trailing)}.md3-link-button-wrapper{inline-size:100%}.md3-button ::slotted([slot=icon]){display:inline-flex;position:relative;writing-mode:horizontal-tb;fill:currentColor;color:var(--_with-icon-icon-color);font-size:var(--_with-icon-icon-size);inline-size:var(--_with-icon-icon-size);block-size:var(--_with-icon-icon-size)}.md3-button:hover ::slotted([slot=icon]){color:var(--_with-icon-hover-icon-color)}.md3-button:focus ::slotted([slot=icon]){color:var(--_with-icon-focus-icon-color)}.md3-button:active ::slotted([slot=icon]){color:var(--_with-icon-pressed-icon-color)}.md3-button:disabled ::slotted([slot=icon]){color:var(--_with-icon-disabled-icon-color);opacity:var(--_with-icon-disabled-icon-opacity)}.md3-button__touch{position:absolute;top:50%;height:48px;left:0;right:0;transform:translateY(-50%)}/*# sourceMappingURL=shared-styles.css.map */
`;

// node_modules/lit-html/development/static.js
var brand = Symbol.for("");
var unwrapStaticValue = (value) => {
  if ((value === null || value === void 0 ? void 0 : value.r) !== brand) {
    return void 0;
  }
  return value === null || value === void 0 ? void 0 : value["_$litStatic$"];
};
var textFromStatic = (value) => {
  if (value["_$litStatic$"] !== void 0) {
    return value["_$litStatic$"];
  } else {
    throw new Error(`Value passed to 'literal' function must be a 'literal' result: ${value}. Use 'unsafeStatic' to pass non-literal values, but
            take care to ensure page security.`);
  }
};
var literal = (strings, ...values) => ({
  ["_$litStatic$"]: values.reduce((acc, v, idx) => acc + textFromStatic(v) + strings[idx + 1], strings[0]),
  r: brand
});
var stringsCache = /* @__PURE__ */ new Map();
var withStatic = (coreTag) => (strings, ...values) => {
  const l = values.length;
  let staticValue;
  let dynamicValue;
  const staticStrings = [];
  const dynamicValues = [];
  let i = 0;
  let hasStatics = false;
  let s;
  while (i < l) {
    s = strings[i];
    while (i < l && (dynamicValue = values[i], staticValue = unwrapStaticValue(dynamicValue)) !== void 0) {
      s += staticValue + strings[++i];
      hasStatics = true;
    }
    if (i !== l) {
      dynamicValues.push(dynamicValue);
    }
    staticStrings.push(s);
    i++;
  }
  if (i === l) {
    staticStrings.push(strings[l]);
  }
  if (hasStatics) {
    const key = staticStrings.join("$$lit$$");
    strings = stringsCache.get(key);
    if (strings === void 0) {
      staticStrings.raw = staticStrings;
      stringsCache.set(key, strings = staticStrings);
    }
    values = dynamicValues;
  }
  return coreTag(strings, ...values);
};
var html2 = withStatic(html);
var svg2 = withStatic(svg);

// node_modules/@material/web/button/lib/button.js
var _a;
var Button = class extends LitElement {
  /** @nocollapse */
  static get formAssociated() {
    return true;
  }
  constructor() {
    super();
    this.disabled = false;
    this.trailingIcon = false;
    this.hasIcon = false;
    this.preventClickDefault = false;
    this.type = "";
    this.internals = this.attachInternals();
    this.isRedispatchingEvent = false;
    this.handleActivationClick = (event) => {
      if (!isActivationClick(event) || !this.buttonElement) {
        return;
      }
      this.focus();
      dispatchActivationClick(this.buttonElement);
    };
    if (!isServer) {
      this.addEventListener("click", this.handleActivationClick);
    }
  }
  focus() {
    var _a2;
    (_a2 = this.buttonElement) == null ? void 0 : _a2.focus();
  }
  blur() {
    var _a2;
    (_a2 = this.buttonElement) == null ? void 0 : _a2.blur();
  }
  render() {
    const isDisabled = this.disabled && !this.href;
    const button = this.href ? literal`a` : literal`button`;
    const { ariaLabel, ariaHasPopup, ariaExpanded } = this;
    return html2`
      <${button}
        class="md3-button ${classMap(this.getRenderClasses())}"
        ?disabled=${isDisabled}
        aria-label="${ariaLabel || nothing}"
        aria-haspopup="${ariaHasPopup || nothing}"
        aria-expanded="${ariaExpanded || nothing}"
        href=${this.href || nothing}
        target=${this.target || nothing}
        @click="${this.handleClick}"
      >
        ${this.renderFocusRing()}
        ${this.renderElevation()}
        ${this.renderRipple()}
        ${this.renderOutline()}
        ${this.renderTouchTarget()}
        ${this.renderLeadingIcon()}
        ${this.renderLabel()}
        ${this.renderTrailingIcon()}
      </${button}>`;
  }
  getRenderClasses() {
    return {
      "md3-button--icon-leading": !this.trailingIcon && this.hasIcon,
      "md3-button--icon-trailing": this.trailingIcon && this.hasIcon
    };
  }
  renderElevation() {
    return nothing;
  }
  renderOutline() {
    return nothing;
  }
  renderTouchTarget() {
    return html`
      <span class="md3-button__touch"></span>
    `;
  }
  renderRipple() {
    return html`<md-ripple class="md3-button__ripple" ?disabled="${this.disabled}"></md-ripple>`;
  }
  renderFocusRing() {
    return html`<md-focus-ring></md-focus-ring>`;
  }
  renderLabel() {
    return html`<span class="md3-button__label"><slot></slot></span>`;
  }
  renderLeadingIcon() {
    return this.trailingIcon ? nothing : this.renderIcon();
  }
  renderTrailingIcon() {
    return this.trailingIcon ? this.renderIcon() : nothing;
  }
  renderIcon() {
    return html`<slot name="icon" @slotchange="${this.handleSlotChange}"></slot>`;
  }
  handleClick(e) {
    if (this.isRedispatchingEvent) {
      return;
    }
    if (this.preventClickDefault) {
      e.preventDefault();
    }
    const { type, internals: { form } } = this;
    if (!form) {
      return;
    }
    const isSubmit = type === "submit", isReset = type === "reset";
    if (!(isSubmit || isReset)) {
      return;
    }
    e.stopPropagation();
    this.isRedispatchingEvent = true;
    const prevented = !redispatchEvent(this, e);
    this.isRedispatchingEvent = false;
    if (prevented) {
      return;
    }
    if (isSubmit) {
      form.requestSubmit();
    } else if (isReset) {
      form.reset();
    }
  }
  handleSlotChange() {
    this.hasIcon = this.assignedIcons.length > 0;
  }
};
_a = Button;
(() => {
  requestUpdateOnAriaChange(_a);
})();
Button.shadowRootOptions = { mode: "open", delegatesFocus: true };
__decorate([
  property({ type: Boolean, reflect: true })
], Button.prototype, "disabled", void 0);
__decorate([
  property()
], Button.prototype, "href", void 0);
__decorate([
  property()
], Button.prototype, "target", void 0);
__decorate([
  property({ type: Boolean, attribute: "trailingicon" })
], Button.prototype, "trailingIcon", void 0);
__decorate([
  property({ type: Boolean })
], Button.prototype, "hasIcon", void 0);
__decorate([
  property({ type: Boolean })
], Button.prototype, "preventClickDefault", void 0);
__decorate([
  property()
], Button.prototype, "type", void 0);
__decorate([
  query(".md3-button")
], Button.prototype, "buttonElement", void 0);
__decorate([
  queryAssignedElements({ slot: "icon", flatten: true })
], Button.prototype, "assignedIcons", void 0);

export {
  Button,
  styles
};
/*! Bundled license information:

@material/web/button/lib/shared-styles.css.js:
  (**
    * @license
    * Copyright 2022 Google LLC
    * SPDX-License-Identifier: Apache-2.0
    *)

lit-html/development/static.js:
  (**
   * @license
   * Copyright 2020 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

@material/web/button/lib/button.js:
  (**
   * @license
   * Copyright 2019 Google LLC
   * SPDX-License-Identifier: Apache-2.0
   *)
*/
//# sourceMappingURL=chunk-RHX2P57G.js.map
