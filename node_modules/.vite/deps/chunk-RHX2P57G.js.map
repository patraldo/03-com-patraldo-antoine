{
  "version": 3,
  "sources": ["../../@material/web/button/lib/shared-styles.css.ts", "../../lit-html/src/static.ts", "../../@material/web/button/lib/button.ts"],
  "sourcesContent": ["/**\n  * @license\n  * Copyright 2022 Google LLC\n  * SPDX-License-Identifier: Apache-2.0\n  */\n import {css} from 'lit';\n export const styles = css`:root{--md-filled-button-container-shape-start-start: 12px;--md-filled-button-container-shape: 8px}:host{display:inline-flex;outline:none;-webkit-tap-highlight-color:rgba(0,0,0,0);vertical-align:top;--md-ripple-hover-color: var(--_hover-state-layer-color);--md-ripple-pressed-color: var(--_pressed-state-layer-color);--md-ripple-hover-opacity: var(--_hover-state-layer-opacity);--md-ripple-pressed-opacity: var(--_pressed-state-layer-opacity);--md-focus-ring-shape-start-start: var(--_container-shape-start-start);--md-focus-ring-shape-start-end: var(--_container-shape-start-end);--md-focus-ring-shape-end-end: var(--_container-shape-end-end);--md-focus-ring-shape-end-start: var(--_container-shape-end-start)}:host([disabled]){cursor:default;pointer-events:none}.md3-button{display:inline-flex;align-items:center;justify-content:center;box-sizing:border-box;min-inline-size:64px;border:none;outline:none;user-select:none;-webkit-appearance:none;vertical-align:middle;background:rgba(0,0,0,0);text-decoration:none;inline-size:100%;position:relative;z-index:0;block-size:var(--_container-height);font:var(--_label-text-type);color:var(--_label-text-color);padding-inline-start:var(--_spacing-leading);padding-inline-end:var(--_spacing-trailing);gap:8px}.md3-button::before{background-color:var(--_container-color);border-radius:inherit;content:\"\";inset:0;position:absolute}.md3-button::-moz-focus-inner{padding:0;border:0}.md3-button:hover{color:var(--_hover-label-text-color);cursor:pointer}.md3-button:focus{color:var(--_focus-label-text-color)}.md3-button:active{color:var(--_pressed-label-text-color);outline:none}.md3-button:disabled .md3-button__label{color:var(--_disabled-label-text-color);opacity:var(--_disabled-label-text-opacity)}.md3-button:disabled::before{background-color:var(--_disabled-container-color);opacity:var(--_disabled-container-opacity)}@media(forced-colors: active){.md3-button::before{content:\"\";box-sizing:border-box;border:1px solid rgba(0,0,0,0);border-radius:inherit;inset:0;pointer-events:none;position:absolute}}.md3-button,.md3-button__ripple{border-start-start-radius:var(--_container-shape-start-start);border-start-end-radius:var(--_container-shape-start-end);border-end-start-radius:var(--_container-shape-end-start);border-end-end-radius:var(--_container-shape-end-end)}.md3-button::after,.md3-button::before,md-elevation,.md3-button__ripple{z-index:-1}.md3-button--icon-leading{padding-inline-start:var(--_with-icon-spacing-leading);padding-inline-end:var(--_with-icon-spacing-trailing)}.md3-button--icon-trailing{padding-inline-start:var(--_with-trailing-icon-spacing-leading);padding-inline-end:var(--_with-trailing-icon-spacing-trailing)}.md3-link-button-wrapper{inline-size:100%}.md3-button ::slotted([slot=icon]){display:inline-flex;position:relative;writing-mode:horizontal-tb;fill:currentColor;color:var(--_with-icon-icon-color);font-size:var(--_with-icon-icon-size);inline-size:var(--_with-icon-icon-size);block-size:var(--_with-icon-icon-size)}.md3-button:hover ::slotted([slot=icon]){color:var(--_with-icon-hover-icon-color)}.md3-button:focus ::slotted([slot=icon]){color:var(--_with-icon-focus-icon-color)}.md3-button:active ::slotted([slot=icon]){color:var(--_with-icon-pressed-icon-color)}.md3-button:disabled ::slotted([slot=icon]){color:var(--_with-icon-disabled-icon-color);opacity:var(--_with-icon-disabled-icon-opacity)}.md3-button__touch{position:absolute;top:50%;height:48px;left:0;right:0;transform:translateY(-50%)}/*# sourceMappingURL=shared-styles.css.map */\n`;\n ", "/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n// Any new exports need to be added to the export statement in\n// `packages/lit/src/index.all.ts`.\n\nimport {html as coreHtml, svg as coreSvg, TemplateResult} from './lit-html.js';\n\nexport interface StaticValue {\n  /** The value to interpolate as-is into the template. */\n  _$litStatic$: string;\n\n  /**\n   * A value that can't be decoded from ordinary JSON, make it harder for\n   * a attacker-controlled data that goes through JSON.parse to produce a valid\n   * StaticValue.\n   */\n  r: typeof brand;\n}\n\n/**\n * Prevents JSON injection attacks.\n *\n * The goals of this brand:\n *   1) fast to check\n *   2) code is small on the wire\n *   3) multiple versions of Lit in a single page will all produce mutually\n *      interoperable StaticValues\n *   4) normal JSON.parse (without an unusual reviver) can not produce a\n *      StaticValue\n *\n * Symbols satisfy (1), (2), and (4). We use Symbol.for to satisfy (3), but\n * we don't care about the key, so we break ties via (2) and use the empty\n * string.\n */\nconst brand = Symbol.for('');\n\n/** Safely extracts the string part of a StaticValue. */\nconst unwrapStaticValue = (value: unknown): string | undefined => {\n  if ((value as Partial<StaticValue>)?.r !== brand) {\n    return undefined;\n  }\n  return (value as Partial<StaticValue>)?.['_$litStatic$'];\n};\n\n/**\n * Wraps a string so that it behaves like part of the static template\n * strings instead of a dynamic value.\n *\n * Users must take care to ensure that adding the static string to the template\n * results in well-formed HTML, or else templates may break unexpectedly.\n *\n * Note that this function is unsafe to use on untrusted content, as it will be\n * directly parsed into HTML. Do not pass user input to this function\n * without sanitizing it.\n *\n * Static values can be changed, but they will cause a complete re-render\n * since they effectively create a new template.\n */\nexport const unsafeStatic = (value: string): StaticValue => ({\n  ['_$litStatic$']: value,\n  r: brand,\n});\n\nconst textFromStatic = (value: StaticValue) => {\n  if (value['_$litStatic$'] !== undefined) {\n    return value['_$litStatic$'];\n  } else {\n    throw new Error(\n      `Value passed to 'literal' function must be a 'literal' result: ${value}. Use 'unsafeStatic' to pass non-literal values, but\n            take care to ensure page security.`\n    );\n  }\n};\n\n/**\n * Tags a string literal so that it behaves like part of the static template\n * strings instead of a dynamic value.\n *\n * The only values that may be used in template expressions are other tagged\n * `literal` results or `unsafeStatic` values (note that untrusted content\n * should never be passed to `unsafeStatic`).\n *\n * Users must take care to ensure that adding the static string to the template\n * results in well-formed HTML, or else templates may break unexpectedly.\n *\n * Static values can be changed, but they will cause a complete re-render since\n * they effectively create a new template.\n */\nexport const literal = (\n  strings: TemplateStringsArray,\n  ...values: unknown[]\n): StaticValue => ({\n  ['_$litStatic$']: values.reduce(\n    (acc, v, idx) => acc + textFromStatic(v as StaticValue) + strings[idx + 1],\n    strings[0]\n  ) as string,\n  r: brand,\n});\n\nconst stringsCache = new Map<string, TemplateStringsArray>();\n\n/**\n * Wraps a lit-html template tag (`html` or `svg`) to add static value support.\n */\nexport const withStatic =\n  (coreTag: typeof coreHtml | typeof coreSvg) =>\n  (strings: TemplateStringsArray, ...values: unknown[]): TemplateResult => {\n    const l = values.length;\n    let staticValue: string | undefined;\n    let dynamicValue: unknown;\n    const staticStrings: Array<string> = [];\n    const dynamicValues: Array<unknown> = [];\n    let i = 0;\n    let hasStatics = false;\n    let s: string;\n\n    while (i < l) {\n      s = strings[i];\n      // Collect any unsafeStatic values, and their following template strings\n      // so that we treat a run of template strings and unsafe static values as\n      // a single template string.\n      while (\n        i < l &&\n        ((dynamicValue = values[i]),\n        (staticValue = unwrapStaticValue(dynamicValue))) !== undefined\n      ) {\n        s += staticValue + strings[++i];\n        hasStatics = true;\n      }\n      // If the last value is static, we don't need to push it.\n      if (i !== l) {\n        dynamicValues.push(dynamicValue);\n      }\n      staticStrings.push(s);\n      i++;\n    }\n    // If the last value isn't static (which would have consumed the last\n    // string), then we need to add the last string.\n    if (i === l) {\n      staticStrings.push(strings[l]);\n    }\n\n    if (hasStatics) {\n      const key = staticStrings.join('$$lit$$');\n      strings = stringsCache.get(key)!;\n      if (strings === undefined) {\n        // Beware: in general this pattern is unsafe, and doing so may bypass\n        // lit's security checks and allow an attacker to execute arbitrary\n        // code and inject arbitrary content.\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (staticStrings as any).raw = staticStrings;\n        stringsCache.set(\n          key,\n          (strings = staticStrings as unknown as TemplateStringsArray)\n        );\n      }\n      values = dynamicValues;\n    }\n    return coreTag(strings, ...values);\n  };\n\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n *\n * Includes static value support from `lit-html/static.js`.\n */\nexport const html = withStatic(coreHtml);\n\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n *\n * Includes static value support from `lit-html/static.js`.\n */\nexport const svg = withStatic(coreSvg);\n", "/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport '../../focus/focus-ring.js';\nimport '../../ripple/ripple.js';\n\nimport {html, isServer, LitElement, nothing, TemplateResult} from 'lit';\nimport {property, query, queryAssignedElements} from 'lit/decorators.js';\nimport {classMap} from 'lit/directives/class-map.js';\nimport {html as staticHtml, literal} from 'lit/static-html.js';\n\nimport {ARIAMixinStrict} from '../../internal/aria/aria.js';\nimport {requestUpdateOnAriaChange} from '../../internal/aria/delegate.js';\nimport {dispatchActivationClick, isActivationClick, redispatchEvent} from '../../internal/controller/events.js';\n\n/**\n * A button component.\n */\nexport abstract class Button extends LitElement {\n  static {\n    requestUpdateOnAriaChange(this);\n  }\n\n  /** @nocollapse */\n  static get formAssociated() {\n    return true;\n  }\n\n  /** @nocollapse */\n  static override shadowRootOptions:\n      ShadowRootInit = {mode: 'open', delegatesFocus: true};\n\n  /**\n   * Whether or not the button is disabled.\n   */\n  @property({type: Boolean, reflect: true}) disabled = false;\n\n  /**\n   * The URL that the link button points to.\n   */\n  @property() href?: string;\n\n  /**\n   * Where to display the linked `href` URL for a link button. Common options\n   * include `_blank` to open in a new tab.\n   */\n  @property() target?: string;\n\n  /**\n   * Whether to render the icon at the inline end of the label rather than the\n   * inline start.\n   *\n   * _Note:_ Link buttons cannot have trailing icons.\n   */\n  @property({type: Boolean, attribute: 'trailingicon'}) trailingIcon = false;\n\n  /**\n   * Whether to display the icon or not.\n   */\n  @property({type: Boolean}) hasIcon = false;\n\n  /**\n   * Whether `preventDefault()` should be called on the underlying button.\n   * Useful for preventing certain native functionalities like preventing form\n   * submissions.\n   */\n  @property({type: Boolean}) preventClickDefault = false;\n\n  /**\n   * Specifies the type of button, used for controlling forms. When type\n   * is `submit`, the containing form is submitted; when it is `reset` the\n   * form is reset.\n   */\n  @property() type: ''|'submit'|'reset' = '';\n\n  @query('.md3-button') private readonly buttonElement!: HTMLElement|null;\n\n  @queryAssignedElements({slot: 'icon', flatten: true})\n  private readonly assignedIcons!: HTMLElement[];\n\n  private readonly internals =\n      (this as HTMLElement /* needed for closure */).attachInternals();\n\n  // flag to avoid processing redispatched event.\n  private isRedispatchingEvent = false;\n\n  constructor() {\n    super();\n    if (!isServer) {\n      this.addEventListener('click', this.handleActivationClick);\n    }\n  }\n\n  override focus() {\n    this.buttonElement?.focus();\n  }\n\n  override blur() {\n    this.buttonElement?.blur();\n  }\n\n  protected override render() {\n    // Link buttons may not be disabled\n    const isDisabled = this.disabled && !this.href;\n\n    const button = this.href ? literal`a` : literal`button`;\n    // Needed for closure conformance\n    const {ariaLabel, ariaHasPopup, ariaExpanded} = this as ARIAMixinStrict;\n    return staticHtml`\n      <${button}\n        class=\"md3-button ${classMap(this.getRenderClasses())}\"\n        ?disabled=${isDisabled}\n        aria-label=\"${ariaLabel || nothing}\"\n        aria-haspopup=\"${ariaHasPopup || nothing}\"\n        aria-expanded=\"${ariaExpanded || nothing}\"\n        href=${this.href || nothing}\n        target=${this.target || nothing}\n        @click=\"${this.handleClick}\"\n      >\n        ${this.renderFocusRing()}\n        ${this.renderElevation()}\n        ${this.renderRipple()}\n        ${this.renderOutline()}\n        ${this.renderTouchTarget()}\n        ${this.renderLeadingIcon()}\n        ${this.renderLabel()}\n        ${this.renderTrailingIcon()}\n      </${button}>`;\n  }\n\n  protected getRenderClasses() {\n    return {\n      'md3-button--icon-leading': !this.trailingIcon && this.hasIcon,\n      'md3-button--icon-trailing': this.trailingIcon && this.hasIcon,\n    };\n  }\n\n  protected renderElevation(): TemplateResult|typeof nothing {\n    return nothing;\n  }\n\n  protected renderOutline(): TemplateResult|typeof nothing {\n    return nothing;\n  }\n\n  private renderTouchTarget() {\n    return html`\n      <span class=\"md3-button__touch\"></span>\n    `;\n  }\n\n  private readonly handleActivationClick = (event: MouseEvent) => {\n    if (!isActivationClick((event)) || !this.buttonElement) {\n      return;\n    }\n    this.focus();\n    dispatchActivationClick(this.buttonElement);\n  };\n\n  private renderRipple() {\n    return html`<md-ripple class=\"md3-button__ripple\" ?disabled=\"${\n        this.disabled}\"></md-ripple>`;\n  }\n\n  private renderFocusRing() {\n    return html`<md-focus-ring></md-focus-ring>`;\n  }\n\n  private renderLabel() {\n    return html`<span class=\"md3-button__label\"><slot></slot></span>`;\n  }\n\n  private renderLeadingIcon() {\n    return this.trailingIcon ? nothing : this.renderIcon();\n  }\n\n  private renderTrailingIcon() {\n    return this.trailingIcon ? this.renderIcon() : nothing;\n  }\n\n  private renderIcon() {\n    return html`<slot name=\"icon\" @slotchange=\"${\n        this.handleSlotChange}\"></slot>`;\n  }\n\n  private handleClick(e: MouseEvent) {\n    if (this.isRedispatchingEvent) {\n      return;\n    }\n    if (this.preventClickDefault) {\n      e.preventDefault();\n    }\n    // based on type, trigger form action.\n    const {type, internals: {form}} = this;\n    if (!form) {\n      return;\n    }\n    const isSubmit = type === 'submit', isReset = type === 'reset';\n    if (!(isSubmit || isReset)) {\n      return;\n    }\n    e.stopPropagation();\n    this.isRedispatchingEvent = true;\n    const prevented = !redispatchEvent(this, e);\n    this.isRedispatchingEvent = false;\n    if (prevented) {\n      return;\n    }\n    if (isSubmit) {\n      form.requestSubmit();\n    } else if (isReset) {\n      form.reset();\n    }\n  }\n\n  private handleSlotChange() {\n    this.hasIcon = this.assignedIcons.length > 0;\n  }\n}\n"],
  "mappings": "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",
  "names": ["html", "svg", "_a", "html"]
}
